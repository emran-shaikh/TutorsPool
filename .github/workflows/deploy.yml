name: 🚀 Deploy TutorsPool

on:
  push:
    branches: [ main, production ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  FIREBASE_PRIORITY: true

jobs:
  security-check:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: 🚫 Check for sensitive files
        run: |
          if [ -f "firebase-admin-key.json" ]; then
            echo "❌ ERROR: firebase-admin-key.json found in repository!"
            echo "This file should be in .gitignore and never committed"
            exit 1
          fi
          
          if [ -f ".env" ]; then
            echo "❌ ERROR: .env file found in repository!"
            echo "This file should be in .gitignore and never committed"
            exit 1
          fi
          
          if grep -r "AIzaSy\|sk_live\|sk_test" --exclude-dir=node_modules --exclude=*.md .; then
            echo "❌ ERROR: Hardcoded secrets found in code!"
            exit 1
          fi
          
          echo "✅ Security check passed"

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🧪 Run tests
        run: npm test --if-present
      
      - name: 🔍 TypeScript check
        run: npx tsc --noEmit

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [security-check, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🔧 Set Firebase environment variables
        run: |
          echo "VITE_NODE_ENV=production" >> .env
          echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> .env
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" >> .env
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> .env
          echo "VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}" >> .env
      
      - name: 🏗️ Build frontend
        run: npm run build
      
      - name: 📦 Package build artifacts
        run: |
          tar -czf frontend-build.tar.gz dist/ public/
      
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend-build.tar.gz

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: .
      
      - name: 📂 Extract build
        run: tar -xzf frontend-build.tar.gz
      
      # Deploy to Vercel
      - name: ⚡ Deploy to Vercel
        uses: amondnet/vercel-action@v25
        if: ${{ secrets.VERCEL_ORG_ID && secrets.VERCEL_PROJECT_ID }}
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'
          env-vars: |
            NODE_ENV:production
            USE_FIREBASE:true
            USE_SUPABASE:false
            FIREBASE_PROJECT_ID:${{ secrets.FIREBASE_PROJECT_ID }}
            FIREBASE_PRIVATE_KEY:${{ secrets.FIREBASE_PRIVATE_KEY }}
            FIREBASE_PRIVATE_KEY_ID:${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
            FIREBASE_CLIENT_EMAIL:${{ secrets.FIREBASE_CLIENT_EMAIL }}
            FIREBASE_CLIENT_ID:${{ secrets.FIREBASE_CLIENT_ID }}
            FIREBASE_AUTH_URI:${{ secrets.FIREBASE_AUTH_URI }}
            FIREBASE_TOKEN_URI:${{ secrets.FIREBASE_TOKEN_URI }}
            STRIPE_SECRET_KEY:${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_PUBLISHABLE_KEY:${{ secrets.STRIPE_PUBLISHABLE_KEY }}
            STRIPE_WEBHOOK_SECRET:${{ secrets.STRIPE_WEBHOOK_SECRET }}
            JWT_SECRET:${{ secrets.JWT_SECRET }}
            GOOGLE_MAPS_API_KEY:${{ secrets.GOOGLE_MAPS_API_KEY }}
      alternate:
        # Alternative deployment options
    
    steps:
      - uses: actions/checkout@v4
      
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
    
    # Heroku deployment alternative
    steps:
      - uses: actions/checkout@v4
      
      - name: 🚀 Deploy to Heroku
        if: ${{ secrets.HEROKU_API_KEY }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          echo "🚀 Deploying to Heroku..."
          # Add Heroku deployment commands here

  deploy-preview:
    name: 👀 Deploy Preview
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
    
      - name: 📂 Extract build
        run: tar -xzf frontend-build.tar.gz
      
      # Deploy preview to Vercel
      - name: 👀 Deploy preview to Vercel
        uses: amondnet/vercel-action@v25
        if: ${{ secrets.VERCEL_ORG_ID && secrets.VERCEL_PROJECT_ID }}
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'
          pr-no: ${{ github.event.pull_request.number }}
      
      - name: 💬 Comment deployment URL
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            🚀 **Preview deployment ready!**
            
            **Preview URL:** https://your-app-git-${{ github.event.pull_request.head.ref }}-your-team.vercel.app
            
            **Firebase Configuration:** ✅ Secure environment variables loaded
            
            **Security Status:** 
            - ✅ No hardcoded secrets
            - ✅ Firebase Admin SDK secure
            - ✅ Environment variables configured

  notify-success:
    name: ✅ Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📢 Notify deployment success
        if: github.event_name == 'push'
        run: |
          echo "🎉 TutorsPool deployed successfully!"
          echo "🔒 Firebase configuration secure"
          echo "📊 Environment: production"
          echo "🌐 Application ready at: https://your-domain.com"

  notify-failure:
    name: ❌ Notify Failure
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: 🚨 Notify deployment failure
        run: |
          echo "❌ TutorsPool deployment failed"
          echo "🔍 Check the logs above for details"
          echo "🔒 Verify all required secrets are set in GitHub"
